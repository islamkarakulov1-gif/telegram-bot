require('dotenv').config();
console.log("üöÄ Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...");

const express = require("express");
const fetch = require("node-fetch");
const { Telegraf, Markup } = require("telegraf");
const LocalSession = require("telegraf-session-local");

const BOT_TOKEN = process.env.BOT_TOKEN;
const OWNER_CHAT_ID = process.env.OWNER_CHAT_ID;
const SELF_URL = process.env.SELF_URL;
const PORT = process.env.PORT || 10000;

if (!BOT_TOKEN || !OWNER_CHAT_ID || !SELF_URL) {
  console.error("‚ùå –£–∫–∞–∂–∏ BOT_TOKEN, OWNER_CHAT_ID –∏ SELF_URL –≤ .env");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
bot.use(new LocalSession({ database: "sessions.json" }).middleware());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = Markup.inlineKeyboard([
  [Markup.button.callback("–°–∞—É–Ω–∞ –ø–æ–º–µ–Ω—å—à–µ", "sauna_small")],
  [Markup.button.callback("–°–∞—É–Ω–∞ –ø–æ–±–æ–ª—å—à–µ", "sauna_big")],
]);

const saunaInfo = {
  small: {
    title: "–°–∞—É–Ω–∞ –ø–æ–º–µ–Ω—å—à–µ",
    text: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –î–æ 5 —á–µ–ª–æ–≤–µ–∫
- –ï—Å–ª–∏ –±–æ–ª—å—à–µ 5 ‚Äî –¥–æ–ø–ª–∞—Ç–∞ 1000 –∑–∞ –∫–∞–∂–¥–æ–≥–æ
- 7000 –∑–∞ —á–∞—Å
- –ú–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞
- –ö—É—Ö–Ω–∏ –Ω–µ—Ç`,
    map: "https://go.2gis.com/30tRT",
    imgs: [
      "https://i.ibb.co/ty5QdSg/IMG-20251010-WA0006.jpg",
      "https://i.ibb.co/sp2ZfMXx/IMG-20251010-WA0004.jpg",
      "https://i.ibb.co/bgmtyCZ7/IMG-20251010-WA0005.jpg",
    ],
    video: "https://files.catbox.moe/y9slc1.mp4",
  },
  big: {
    title: "–°–∞—É–Ω–∞ –ø–æ–±–æ–ª—å—à–µ",
    text: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –î–æ 8 —á–µ–ª–æ–≤–µ–∫
- –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Å–≤–µ—Ä—Ö ‚Äî 2000
- –°—Ç–æ–∏–º–æ—Å—Ç—å: 12000
- –ú–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞
- –ö—É—Ö–Ω–∏ –Ω–µ—Ç`,
    map: "https://go.2gis.com/OQSBA",
    imgs: [
      "https://i.ibb.co/R4zfm85d/IMG-20251003-WA0008.jpg",
      "https://i.ibb.co/VpPhh83C/IMG-20251003-WA0004.jpg",
      "https://i.ibb.co/23s0WjgT/IMG-20251003-WA0005.jpg",
    ],
    video: "https://files.catbox.moe/ol975e.mp4",
  },
};

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
bot.on("message", async (ctx) => {
  if (ctx.session?.step) return;
  await ctx.reply("–°”ô–ª–µ–º! –ë—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å“õ–∞–Ω—ã“£—ã–∑ “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç.\n–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.", mainMenu);
});

// –í—ã–≤–æ–¥ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
bot.action(["sauna_small", "sauna_big"], async (ctx) => {
  await ctx.answerCbQuery();
  const type = ctx.callbackQuery.data === "sauna_small" ? "small" : "big";
  const info = saunaInfo[type];

  for (const img of info.imgs) {
    await ctx.replyWithPhoto({ url: img });
  }

  if (info.video) {
    await ctx.replyWithVideo({ url: info.video });
  }

  await ctx.replyWithMarkdown(
    `*${info.title}*\n\n${info.text}\n\nüìç [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${info.map})`,
    Markup.inlineKeyboard([
      [Markup.button.callback("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", `book_${type}`)],
      [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back")],
    ])
  );
});

bot.action("back", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", mainMenu);
});

// –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
bot.action(/book_(.+)/, async (ctx) => {
  await ctx.answerCbQuery();
  const type = ctx.match[1];
  ctx.session.booking = { type };
  ctx.session.step = "name";
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
});

bot.on("text", async (ctx) => {
  const step = ctx.session.step;
  const text = ctx.message.text;

  if (!step) return;

  if (step === "name") {
    ctx.session.booking.name = text;
    ctx.session.step = "phone";
    return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
  }

  if (step === "phone") {
    ctx.session.booking.phone = text;
    ctx.session.step = "hours";
    return ctx.reply("–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?");
  }

  if (step === "hours") {
    ctx.session.booking.hours = text;
    const b = ctx.session.booking;
    const info = saunaInfo[b.type];
    const summary = `üßñ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n\n${info.title}\nüë§ –ò–º—è: ${b.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${b.phone}\n‚è∞ –ß–∞—Å–æ–≤: ${b.hours}\nüìç ${info.map}`;

    await ctx.telegram.sendMessage(OWNER_CHAT_ID, summary);
    await ctx.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.");
    ctx.session = {};
  }
});

// Express —Å–µ—Ä–≤–µ—Ä (Render —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Ä—Ç)
const app = express();
app.get("/", (req, res) => res.send("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render!"));
app.listen(PORT, async () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

  const webhookUrl = `${SELF_URL}/bot${BOT_TOKEN}`;
  await bot.telegram.setWebhook(webhookUrl);
  app.use(bot.webhookCallback(`/bot${BOT_TOKEN}`));
  console.log("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhookUrl);
});
